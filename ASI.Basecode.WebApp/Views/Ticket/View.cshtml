@using static ASI.Basecode.Resources.Constants.Enums
@using static ASI.Basecode.Resources.Views.Button
@using static ASI.Basecode.Resources.Messages.Common
@using static ASI.Basecode.Resources.Views.Screen
@using static ASI.Basecode.Resources.Messages.Errors
@model ASI.Basecode.Services.ServiceModels.ViewTicketModel

@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";

    var prevAgentId = 0;
    var reassigned = false;
}

<br />
<br />
<br />
<br />
<style>
    @@import url("https://fonts.googleapis.com/css2?family=Alfa+Slab+One&family=Oswald&display=swap");

    .radio {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        gap: 10px;
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;
    }

        .radio > input {
            position: absolute;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

        .radio > label {
            cursor: pointer;
            font-size: 30px;
            position: relative;
            display: inline-block;
            -webkit-transition: -webkit-transform 0.3s ease;
            transition: -webkit-transform 0.3s ease;
            transition: transform 0.3s ease;
            transition: transform 0.3s ease, -webkit-transform 0.3s ease;
        }

            .radio > label > svg {
                fill: #666;
                -webkit-transition: fill 0.3s ease;
                transition: fill 0.3s ease;
            }

            .radio > label::before,
            .radio > label::after {
                content: "";
                position: absolute;
                width: 6px;
                height: 6px;
                background-color: #ff9e0b;
                border-radius: 50%;
                opacity: 0;
                -webkit-transform: scale(0);
                -ms-transform: scale(0);
                transform: scale(0);
                -webkit-transition: opacity 0.4s ease, -webkit-transform 0.4s ease;
                transition: opacity 0.4s ease, -webkit-transform 0.4s ease;
                transition: transform 0.4s ease, opacity 0.4s ease;
                transition: transform 0.4s ease, opacity 0.4s ease, -webkit-transform 0.4s ease;
                -webkit-animation: particle-explosion 1s ease-out;
                animation: particle-explosion 1s ease-out;
            }

            .radio > label::before {
                top: -15px;
                left: 50%;
                -webkit-transform: translateX(-50%) scale(0);
                -ms-transform: translateX(-50%) scale(0);
                transform: translateX(-50%) scale(0);
            }

            .radio > label::after {
                bottom: -15px;
                left: 50%;
                -webkit-transform: translateX(-50%) scale(0);
                -ms-transform: translateX(-50%) scale(0);
                transform: translateX(-50%) scale(0);
            }

            .radio > label:hover::before,
            .radio > label:hover::after {
                opacity: 1;
                -webkit-transform: translateX(-50%) scale(1.5);
                -ms-transform: translateX(-50%) scale(1.5);
                transform: translateX(-50%) scale(1.5);
            }

            .radio > label:hover {
                -webkit-transform: scale(1.2);
                -ms-transform: scale(1.2);
                transform: scale(1.2);
                -webkit-animation: pulse 0.6s infinite alternate;
                animation: pulse 0.6s infinite alternate;
            }

                .radio > label:hover > svg,
                .radio > label:hover ~ label > svg {
                    fill: #ff9e0b;
                    -webkit-filter: drop-shadow(0 0 15px rgba(255, 158, 11, 0.9));
                    filter: drop-shadow(0 0 15px rgba(255, 158, 11, 0.9));
                    -webkit-animation: shimmer 1s ease infinite alternate;
                    animation: shimmer 1s ease infinite alternate;
                }

        .radio > input:checked + label > svg,
        .radio > input:checked + label ~ label > svg {
            fill: #ff9e0b;
            -webkit-filter: drop-shadow(0 0 15px rgba(255, 158, 11, 0.9));
            filter: drop-shadow(0 0 15px rgba(255, 158, 11, 0.9));
            -webkit-animation: pulse 0.8s infinite alternate;
            animation: pulse 0.8s infinite alternate;
        }

    @@-webkit-keyframes pulse {
        0% {
            -webkit-transform: scale(1);
            transform: scale(1);
        }

        100% {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }
    }

    @@keyframes pulse {
        0% {
            -webkit-transform: scale(1);
            transform: scale(1);
        }

        100% {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }
    }

    @@-webkit-keyframes particle-explosion {
        0% {
            opacity: 0;
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
        }

        50% {
            opacity: 1;
            -webkit-transform: scale(1.2);
            transform: scale(1.2);
        }

        100% {
            opacity: 0;
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
        }
    }

    @@keyframes particle-explosion {
        0% {
            opacity: 0;
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
        }

        50% {
            opacity: 1;
            -webkit-transform: scale(1.2);
            transform: scale(1.2);
        }

        100% {
            opacity: 0;
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
        }
    }

    @@-webkit-keyframes shimmer {
        0% {
            -webkit-filter: drop-shadow(0 0 10px rgba(255, 158, 11, 0.5));
            filter: drop-shadow(0 0 10px rgba(255, 158, 11, 0.5));
        }

        100% {
            -webkit-filter: drop-shadow(0 0 20px rgba(255, 158, 11, 1));
            filter: drop-shadow(0 0 20px rgba(255, 158, 11, 1));
        }
    }

    @@keyframes shimmer {
        0% {
            -webkit-filter: drop-shadow(0 0 10px rgba(255, 158, 11, 0.5));
            filter: drop-shadow(0 0 10px rgba(255, 158, 11, 0.5));
        }

        100% {
            -webkit-filter: drop-shadow(0 0 20px rgba(255, 158, 11, 1));
            filter: drop-shadow(0 0 20px rgba(255, 158, 11, 1));
        }
    }

    .radio > input:checked + label:hover > svg,
    .radio > input:checked + label:hover ~ label > svg {
        fill: #e58e09;
    }

    .radio > label:hover > svg,
    .radio > label:hover ~ label > svg {
        fill: #ff9e0b;
    }

    .radio input:checked ~ label svg {
        fill: #ffa723;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        font-size: 0.9em;
        color: #666;
        margin-bottom: 5px;
    }

    .message-body {
        font-size: 1.1em;
        color: #333;
    }

    .sender {
        font-weight: bold;
    }

    .timestamp {
        font-style: italic;
    }

    .loader-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Ensure it's on top of everything */
    }

    body {
        align-items: center;
        min-height: 100vh;
        text-transform: uppercase;
        --black: rgba(48, 39, 24, 0.8);
        --beige: #fff2c6;
        --mustard: #f7d337;
        --border: 4px solid var(--black);
        color: var(--black);
    }

    .ticket {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        width: 100%;
        max-width: 800px;
        margin: 20px auto;
        background-color: #fff;
        border: 2px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .attachment-img {
        max-width: 300px;
        max-height: 300px;
        margin-top: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .ticket-stub {
        background-color: #2e3f63;
        text-align: center;
        padding: 15px;
        border-radius: 50px;
        font-family: "Alfa Slab One", sans-serif;
        margin-bottom: 20px;
    }

        .ticket-stub h2 {
            font-size: 1.3em;
            color: #fff;
        }

    .ticket-body {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }

    .detail-item {
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        text-align: left;
    }

        .detail-item h3 {
            font-size: 1.1em;
            color: #0f0f0f;
            margin-bottom: 5px;
        }

        .detail-item p {
            font-size: 1.2em;
            color: #666;
        }

    .send-message-btn {
        grid-column: span 2;
        display: block;
        width: 100%;
        padding: 12px;
        margin-top: 20px;
        background-color: #007bff;
        color: #fff;
        font-size: 1.2em;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }


        .send-message-btn:hover {
            background-color: #0056b3;
        }

    /* Modal Styling */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 60%;
        border-radius: 10px;
    }

    .message-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .message {
        padding: 10px;
        border-radius: 10px;
        max-width: 80%;
    }

    .sent {
        align-self: flex-end;
        background-color: #6c96c7;
        color: white;
    }

    .received {
        align-self: flex-start;
        background-color: #eaeaea;
    }

    .input-area {
        display: flex;
        gap: 10px;
    }

        .input-area input {
            flex: 1;
            padding: 10px;
            font-size: 1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .input-area button {
            padding: 10px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .input-area button:hover {
                background-color: #218838;
            }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .reassign-section {
        margin-top: 20px;
    }

        .reassign-section label {
            font-size: 1.2em;
            color: #333;
            margin-bottom: 10px;
            display: block;
        }

        .reassign-section select {
            width: 100%;
            padding: 10px;
            font-size: 1.1em;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .reassign-section button {
            margin-top: 10px;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .reassign-section button:hover {
                background-color: #0056b3;
            }
</style>



<div class="ticket">
    <!-- Ticket Stub -->
    <div class="ticket-stub">
        <h3 style="color: darkgray;">Ticket #@Model.Ticket.Id</h3>
        <h2>@Description: @Model.Ticket.Description</h2>
    </div>

    <!-- Ticket Body -->
    <div class="ticket-body">
        <div class="detail-item">
            <h3>@Customer</h3>
            <p>@Model.Customer</p>
        </div>
        <div class="detail-item">
            <h3>@Agent</h3>
            @if (Model.TicketAssigned.Status.Equals("PENDING"))
            {
                <p>To be approved</p>
            }else{
                <p>@Model.TicketAssigned.Agent.UserDetails.FirstOrDefault().FirstName</p>
            }
        </div>
        <div class="detail-item">
            <h3>@Category</h3>
            <p>@Model.Ticket.Category.CategoryName</p>
        </div>
        <div class="detail-item">
            <h3>@Priority</h3>
            <p>@Model.Ticket.Priority</p>
        </div>
        <div class="detail-item">
            <h3>@ASI.Basecode.Resources.Views.Screen.Status</h3>
            <p>@Model.Ticket.Status.StatusName</p>
        </div>
        <div class="detail-item">
            <h3>@TimeSubmitted</h3>
            <p>@Model.Ticket.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>
        <div class="detail-item">
            <h3>@LastUpdated</h3>
            <p>@Model.Ticket.UpdatedAt?.ToString("dd MMM yyyy, hh:mm tt")</p>
        </div>
        <br />
        @if (Model.Ticket.Status.StatusName.Equals("CLOSED") && Model.Ticket.Summary != null)
        {       
        <div style="width: 200%" class="ticket-stub">
            <h3 style="color: darkgray;">Ticket Summary</h3>
            <p style="font-family: Arial !important; color: white; text-transform: none; text-align: left " id="summarycontent">@Model.Ticket.Summary<p>
        </div>
        }

        @if (!Model.TicketAssigned.Status.Equals("PENDING"))
        {
            <button class="send-message-btn">@ViewDetailsBtn</button>
        }
    </div>
</div>

<!-- Modal -->
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>@TicketDescription</h2>
        <p>@Model.Ticket.Description</p>
        @if (!string.IsNullOrEmpty(Model.Ticket.Attachments))
        {
            <div class="attachment">
                <img src="~/@Url.Content(Model.Ticket.Attachments)" alt="attachment" class="attachment-img" />
            </div>
        }
        <h3>@Conversation</h3>


        <!-- Message Container -->
        <div class="message-container">
            @if (Model.Messages.Count == 0)
            {
                <div id="noConversation" class="alert alert-info text-center">@NoConvoyet</div>
            }

            @foreach (var message in Model.Messages)
            {
                var isCurrentUser = User.FindFirst("UserId")?.Value == message.UserId.ToString();
                var isCurrentAgent = User.FindFirst("UserId")?.Value == Model.TicketAssigned.AgentId.ToString();
                var displayName = "";

                //Agent
                if (User.IsInRole("2"))
                {
                    if (message.Ticket.Reassigned == (int)TicketReassigned.TRUE && Model.TicketAssigned.ReassignedTo.Id == message.UserId && !reassigned)
                    {
                        reassigned = true;
                        <p align="center">--- Reassigned To Agent @Model.TicketAssigned.ReassignedTo.Username ---</p>
                    }
                    displayName = isCurrentUser ? "You (Agent)" : Model.Customer;
                    if (message.User.RoleId == 2)
                    {
                        <div class="message sent">
                            <div class="message-header">
                                @if (isCurrentUser)
                                {
                                    <span class="sender">@displayName</span>

                                }
                                else
                                {
                                    <span class="sender">@message.User.Username</span>
                                }
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="message @(isCurrentUser ? "sent" : "received")">
                            <div class="message-header">
                                <span class="sender">@displayName</span>
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                }

                //Customer
                else
                {
                    if (message.Ticket.Reassigned == (int)TicketReassigned.TRUE && message.UserId == Model.TicketAssigned.ReassignedToId && !reassigned)
                    {
                        reassigned = true;
                        <p align="center">--- Reassigned To Agent @Model.TicketAssigned.ReassignedTo.Username ---</p>
                    }
                    displayName = isCurrentUser ? "You (Customer)" : Model.Agent;

                    if (message.User.RoleId == 2)
                    {
                        <div class="message received">
                            <div class="message-header">
                                @if (isCurrentUser)
                                {
                                    <span class="sender">@displayName</span>

                                }
                                else
                                {
                                    <span class="sender">@message.User.Username</span>
                                }
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="message @(isCurrentUser ? "sent" : "received")">
                            <div class="message-header">
                                <span class="sender">@displayName</span>
                                <span class="timestamp">@message.CreatedAt?.ToString("dd MMM yyyy, hh:mm tt")</span>
                            </div>
                            <div class="message-body">
                                @message.Message
                            </div>
                        </div>
                    }
                    prevAgentId = message.UserId ?? 0;
                }
            }
        </div>


        @if (User.IsInRole("2") && Model.Ticket.Reassigned != (int)TicketReassigned.TRUE)
        {
            <div class="reassign-section">
                <form asp-action="ReassignTicket" method="post">
                    <label for="agentSelect">@ReassignTicketToAgent:</label>
                    <select id="agentSelect" name="newAgent">
                        @foreach (var agent in Model.Agents)
                        {
                            <option value="@agent.Id">@agent.Username - @agent.Department.DepartmentName</option>
                        }
                    </select>
                    <input type="hidden" name="ticketId" value="@Model.Ticket.Id" />
                    <button type="submit">@ReassignBtn</button>
                </form>
            </div>
        }

        <br />

        <!-- Input Area -->
        <div class="input-area">
            <input type="hidden" id="ticketId" value="@Model.Ticket.Id" />
            @if (Model.Ticket.Reassigned == (int)TicketReassigned.TRUE && User.FindFirst("UserId").Value == Model.TicketAssigned.AgentId.ToString())
            {
                <input type="text" id="messageInput" disabled placeholder="You have reassigned this ticket already" onkeydown="handleKeyDown(event)">
                <button disabled class="btn btn-info" id="sendMessageButton" style="background: blue;">@SendBtn</button>
            }
            else
            {
                if (Model.Ticket.Status.StatusName.Equals("CLOSED"))
                {
                    <input type="text" id="messageInput" disabled placeholder="Ticket closed." onkeydown="handleKeyDown(event)">
                    <button id="sendMessageButton" disabled class="btn btn-info" style="cursor: not-allowed;">
                        @SendBtn
                    </button>
                    @if (User.IsInRole("1"))
                    {
                        if (!ViewBag.alreadyFeedback)
                        {
                            <button id="writeFeedbackButton" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#feedbackModal">
                                @WriteFeedbackBtn
                            </button>
                        }
                    }

                    @if (User.IsInRole("2"))
                    {
                        if (ViewBag.alreadyFeedback)
                        {
                            <button id="viewFeedbackButton" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#viewfeedbackModal">
                                @ViewFeedbackBtn
                            </button>
                        }
                    }

                }
                else
                {
                    <input type="text" id="messageInput" placeholder="Type your message..." onkeydown="handleKeyDown(event)">
                    <button id="sendMessageButton" onclick="sendMessage()" class="btn btn-indigo" style="background: blue;">@SendBtn</button>
                }
            }
        </div>

        @if (Model.Ticket.Reassigned == Convert.ToInt32(TicketReassigned.TRUE))
        {
            if (User.FindFirst("UserId").Value == Model.TicketAssigned.ReassignedToId.ToString() && (Model.Ticket.StatusId != 4 && Model.Ticket.StatusId != 5))
            {
                <div class="resolved-section mt-3">
                    <button onclick="markAsResolved()" id="markResolvedBtn" class="btn btn-success w-100">@MarkedAsResolvedBtn</button>
                </div>
            }
        }
        else if (User.FindFirst("UserId").Value == Model.TicketAssigned.AgentId.ToString() && (Model.Ticket.StatusId != 4 && Model.Ticket.StatusId != 5))
        {
            <div class="resolved-section mt-3">
                <button onclick="markAsResolved()" id="markResolvedBtn" class="btn btn-success w-100">@MarkedAsResolvedBtn</button>
            </div>
        }
        @if (User.FindFirst("UserId").Value == Model.Ticket.UserId.ToString() && Model.Ticket.StatusId == 4)
        {
            <div class="resolved-section mt-3">
                <button onclick="acceptResolution()" id="markResolvedBtn" class="btn btn-success w-100">@AcceptResolutionBtn</button>
            </div>
        }
    </div>
</div>


<div class="modal" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="feedbackModalLabel">@WriteFeedbackBtn</h5> 
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form inside the modal -->
                <form id="ratingForm" asp-controller="Ticket" asp-action="SubmitFeedback" method="POST">
                    <!-- Hidden input for ticket ID -->
                    <input type="hidden" name="ticketId" id="ticketId" value="@Model.Ticket.Id">

                    <!-- Stars area -->
                    <div class="radio">
                        <input id="rating-5" type="radio" name="rating" value="5" />
                        <label for="rating-5" title="5 stars">
                            <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                            </svg>
                        </label>

                        <input id="rating-4" type="radio" name="rating" value="4" />
                        <label for="rating-4" title="4 stars">
                            <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                            </svg>
                        </label>

                        <input id="rating-3" type="radio" name="rating" value="3" />
                        <label for="rating-3" title="3 stars">
                            <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                            </svg>
                        </label>

                        <input id="rating-2" type="radio" name="rating" value="2" />
                        <label for="rating-2" title="2 stars">
                            <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                            </svg>
                        </label>

                        <input id="rating-1" type="radio" name="rating" value="1" required/>
                        <label for="rating-1" title="1 stars">
                            <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg">
                                <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                            </svg>
                        </label>
                    </div>

                    <!-- Comment textarea -->
                    <div class="mb-3">
                        <label for="comment" class="form-label">Comment</label>
                        <textarea class="form-control" id="comment" name="comment" rows="3" required></textarea>
                    </div>

                    <!-- Send button -->
                    <button type="submit" class="btn btn-primary" id="submitRating">@SendBtn</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="viewfeedbackModal" tabindex="-1" aria-labelledby="viewfeedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewfeedbackModalLabel">@ViewFeedbackBtn</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Display feedback details -->
                <div class="feedback-details">
                    @if (Model.Feedback != null)
                    {
                        <h6>Rating: </h6>
                        <div class="star-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= @Model.Feedback.Star)
                                {
                                    <label title="@i stars">
                                        <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg" fill="#FFD700">
                                            <!-- Filled Star -->
                                            <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                                        </svg>
                                    </label>
                                }
                                else
                                {
                                    <label title="@i stars">
                                        <svg viewBox="0 0 576 512" height="1em" xmlns="http://www.w3.org/2000/svg" fill="#d3d3d3">
                                            <!-- Empty Star -->
                                            <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                                        </svg>
                                    </label>
                                }
                            }
                        </div>

                        <p><strong>Comment:</strong> @Model.Feedback.Comments</p>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="closeModalButton" data-bs-dismiss=" modal">@CloseBtn</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
    $(document).ready(function () {
        $('#submitRating').on('click', function (event) {
            const isChecked = $('input[name="rating"]:checked');
            const comment = $('#comment').val().trim(); // Get the value of the comment textarea and trim whitespace
            console.log(isChecked);

            // Check if rating is selected
            if (isChecked.length === 0) {
                toastr.error("Please choose a rating.");
                event.preventDefault(); // Prevent form submission
            }
            // Check if comment is empty
            else if (comment.length === 0) {
                toastr.error("Please enter a comment.");
                event.preventDefault(); // Prevent form submission
            }
            else {
                // Optionally, you can submit the form programmatically if a rating and comment are provided
                $('#ratingForm').submit();
            }
        });


        // Attach a click event handler to the feedback button
        $('#writeFeedbackButton').click(function () {
            // Manually open the modal without the backdrop
            $('#feedbackModal').modal({
                backdrop: false
            });
        });

        $('#viewFeedbackButton').click(function () {
            // Manually open the modal without the backdrop
            $('#viewfeedbackModal').modal({
                backdrop: false
            });
        });

        $('#closeModalButton').click(function () {
            $('#viewfeedbackModal').modal('hide');
        });

        $('#viewTicketSummaryButton').click(function () {
            // Manually open the modal without the backdrop
            $('#ticketsummaryModal').modal({
                backdrop: false
            });
            var ticketId = $(this).data('ticketid');
            // Send AJAX request to generate report
            $.ajax({
                    url: '/Ticket/GetTicketSummary',
                type: 'POST',
                data: { ticketId: ticketId },
                success: function (summary) {
                    console.log(summary);
                    var Content = $('#summarycontent');
                    Content.empty(); // Clear existing list items
                    // append the summary content in a nice and indented way. bold words enclosed with double asterisk
                    summary = summary.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");
                    summary = summary.replace(/\n/g, "<br>");
                    Content.append(summary);
                    $('#generateReportModal').modal('show');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Handle error
                    console.log(errorThrown);
                }
            });
        });

        $('#closeSummaryModalButton').click(function () {
            $('#ticketsummaryModal').modal('hide');
        });

        // Format Summary Content neatly
        var pTag = document.getElementById("summarycontent");
        var content = pTag.innerHTML;
        var lines = content.split("\n").map(line => line.trim()).filter(line => line.length > 0);
        var formattedContent = '<ul>';

        lines.forEach(line => {
            // Check if the line starts with a bullet point "*"
            if (line.startsWith('*')) {
                // Remove the leading "*" and trim the line
                line = line.substring(1).trim(); // Remove the "*"

                // Bold text enclosed in "**"
                line = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); // Replace **text** with <strong>text</strong>

                formattedContent += `<li>${line}</li>`;
            }
        });
        formattedContent += '</ul>';
        pTag.innerHTML = formattedContent;
    });


        var modal = document.getElementById("myModal");
        var btn = document.querySelector(".send-message-btn");
        var span = document.getElementsByClassName("close")[0];

        btn.onclick = function () {
            modal.style.display = "block";
        }

        span.onclick = function () {
            modal.style.display = "none";
        }

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        function handleKeyDown(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent default behavior (form submission)
                sendMessage();
            }
        }

        function sendMessage() {
            var input = document.getElementById("messageInput");
            var message = input.value.trim();
            var ticketId = @Model.Ticket.Id;
            var sendButton = document.querySelector('.input-area button');
            var noMessageAlert = document.getElementById('noConversation');

            // Proceed only if the message is not empty
            if (message !== "") {
                // Show the loader
                sendButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...';
                sendButton.disabled = true;

                // Send the message via AJAX
                $.ajax({
                    url: '/Ticket/SendMessage',
                    type: 'POST',
                    data: { ticketId: ticketId, message: message },
                    success: function (response) {
                        if (response.success) {
                            // If there's no previous message, hide the no message alert
                            if (noMessageAlert) {
                                noMessageAlert.style.display = "none";
                            }

                            // Create the new message element
                            var messageContainer = document.querySelector(".message-container");
                            var newMessage = createMessageElement("You", message);

                            // Append the new message to the message container
                            messageContainer.appendChild(newMessage);

                            // Scroll to the bottom of the message container
                            messageContainer.scrollTop = messageContainer.scrollHeight;

                            // Clear the input field
                            input.value = "";

                            if ('@User.IsInRole("1")' == "True") {
                                $('#markResolvedBtn').remove();
                            }

                            toastr.success(response.responseText);

                        } else {
                            toastr.error(response.responseText);
                        }
                    },
                    error: function () {
                        alert("Error sending message.");
                    },
                    complete: function () {
                        // Reset the send button
                        sendButton.innerHTML = '@SendBtn';
                        sendButton.disabled = false;
                    }
                });
            } else {
                alert('Please enter a message before sending.');
            }
        }

        // Helper function to create message element
        function createMessageElement(senderName, messageContent) {
            var message = document.createElement("div");
            message.classList.add("message", "sent");

            // Create the message header
            var messageHeader = document.createElement("div");
            messageHeader.classList.add("message-header");

            var sender = document.createElement("span");
            sender.classList.add("sender");
            sender.textContent = senderName;

            var timestamp = document.createElement("span");
            timestamp.classList.add("timestamp");
            var currentTimestamp = new Date().toLocaleString('en-US', {
                day: '2-digit', month: 'short', year: 'numeric',
                hour: '2-digit', minute: '2-digit'
            });
            timestamp.textContent = currentTimestamp;

            messageHeader.appendChild(sender);
            messageHeader.appendChild(timestamp);

            // Create the message body
            var messageBody = document.createElement("div");
            messageBody.classList.add("message-body");
            messageBody.textContent = messageContent;

            // Append header and body to the message
            message.appendChild(messageHeader);
            message.appendChild(messageBody);

            return message;
        }

        function markAsResolved() {
            var ticketId = @Model.Ticket.Id;
            console.log(ticketId)
            $.ajax({
                url: '/Ticket/MarkedAsResolved',
                type: 'POST',
                data: { ticketId: ticketId },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#messageInput').attr('disabled', true);
                        $('#sendMessageButton').attr('disabled', true);
                        $('#messageInput').attr('placeholder', 'Ticket marked as closed. Waiting for customer approval');
                        $('#markResolvedBtn').remove();
                    } else {
                        toastr.error(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error('An error occurred while marking the ticket as resolved.');
                }
            });
        }


        function acceptResolution() {
            var ticketId = @Model.Ticket.Id;
            console.log(ticketId)
            $.ajax({
                url: '/Ticket/AcceptResolution',
                type: 'POST',
                data: { ticketId: ticketId },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $('#messageInput').attr('disabled', true);
                        $('#sendMessageButton').attr('disabled', true);
                        $('#markResolvedBtn').remove();
                    } else {
                        toastr.error(response.message);
                    }
                setInterval(function () {
                    location.reload();  // Reload the current page
                }, 3000);
            },
                error: function (xhr, status, error) {
                    toastr.error('An error occurred while marking the ticket as resolved.');
                }
            });
        }
</script>

